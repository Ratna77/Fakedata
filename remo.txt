def replace_columns_with_fake_data(dataframe, column_mappings):
    fake = Faker('en_GB')
    fake_data_functions = {
        "first_name": replace_first_name,
        "last_name": fake.last_name,
        "name": fake.name,
        "age": lambda: generate_fake_age(fake),
        "random_int": fake.random_int,
        "city": fake.city,
        "state": lambda: random.choice(["ENG", "SCO", "WAL", "NIR"]),
        "address_line1": fake.street_address,
        "address_line2": fake.secondary_address,
        "postcode": mask_postcode,
        "zipcode": fake.postcode,
        "comments": fake.sentence,
        "phone_number": fake.phone_number,
        "email": fake.email,
        "company": fake.company,
        "job": fake.job,
        "date_of_birth": fake.date_of_birth,
        "organization": fake.company,
        "sort_code": generate_sort_code,
        "singlechar": singleint,
        "alphanumeric": lambda: fake.bothify(text='??????'),
        "text": fake.word
    }
    for column, fake_data_type in column_mappings.items():
        column_index = int(column) - 1
        if fake_data_type in fake_data_functions:
            if fake_data_type == "postcode":
                dataframe.iloc[:, column_index] = dataframe.iloc[:, column_index].apply(
                    lambda x: fake_data_functions[fake_data_type](x) if pd.notna(x) and str(x).strip() != '' else None
                )
            elif fake_data_type == "first_name":
                dataframe.iloc[:, column_index] = dataframe.iloc[:, column_index].apply(
                    lambda x: fake_data_functions[fake_data_type](fake, x) if pd.notna(x) and str(x).strip() != '' else None
                )
            else:
                generated_data = dataframe.iloc[:, column_index].apply(
                    lambda x: fake_data_functions[fake_data_type]() if pd.notna(x) and str(x).strip() != '' else None
                )
                # Check for delimiter characters and replace them with spaces
                generated_data = generated_data.str.replace("|", " ").str.replace("\n", " ")
                dataframe.iloc[:, column_index] = generated_data
        else:
            logger.warning(f"Invalid fake data type for column {column}!")
    return dataframe
